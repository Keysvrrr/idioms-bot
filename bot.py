# –∫–æ–¥
from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

import difflib
import logging
import sqlite3
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler


user_languages = {}


def get_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("ü´Ç –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", callback_data="developers")]
    ]
    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Bonjour! üá®üáµ\n\n"
        "üìö –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º ‚Äî —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π.\n\n"
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö:",
        reply_markup=get_menu_keyboard()
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º–æ–≤.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º —è–∑—ã–∫–µ, "
        "–∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –ø–µ—Ä–µ–≤–æ–¥.\n\n"
        '–ï—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —ç—Ç–æ—Ç —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º. üíî" \n\n'
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
        "/developers - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö\n\n"
        "–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 1.0"
    )
    if update.message:
        await update.message.reply_text(help_text)
    elif update.callback_query:
        await update.callback_query.message.reply_text(help_text)


async def developers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    developers_text = (
        'üí° –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞:\n'
        '–°—Ç—É–¥–µ–Ω—Ç—ã –ö–§–£ –ò–ú–û –í–®–ò–Ø–∏–ü (–≥—Ä—É–ø–ø–∞ 04.3-305):\n'
        '- –í–æ—Ä–æ–Ω–æ–≤–∞ –ö—Å–µ–Ω–∏—è\n'
        '- –®–∏–Ω–∫–∞—Ä–µ–Ω–∫–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞\n'
        '- –ï–≤—Å—Ç–∏—Ñ–µ–µ–≤–∞ –ù–∞–¥–µ–∂–¥–∞\n'
        '- –•—É–¥–∞–π–Ω–∞–∑–∞—Ä–æ–≤ –ù–∞–∑–∞—Ä\n\n'
        'üöÄ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö –¶–∏—Ñ—Ä–æ–≤—ã—Ö –ö–∞—Ñ–µ–¥—Ä –ö–§–£ ‚Äî '
        '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–π IT –∏ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫—É.'
    )
    if update.message:
        await update.message.reply_text(developers_text)
    elif update.callback_query:
        await update.callback_query.message.reply_text(developers_text)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    await query.answer()

    if data == 'help':
        await help_command(update, context)

    elif data == 'developers':
        await developers_command(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_translation(phrase: str) -> str:
    connection = sqlite3.connect('idioms.db')
    cursor = connection.cursor()

    
    cursor.execute("SELECT russian, french FROM idioms")
    idioms = cursor.fetchall()

    best_match_russian = None
    best_match_french = None
    best_similarity_russian = 0
    best_similarity_french = 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—ã —Å –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑–æ–π –≤ –±–¥
    for russian, french in idioms:
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
        similarity_russian = difflib.SequenceMatcher(None, phrase, russian).ratio()
        if similarity_russian > best_similarity_russian:
            best_similarity_russian = similarity_russian
            best_match_russian = russian

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ
        similarity_french = difflib.SequenceMatcher(None, phrase, french).ratio()
        if similarity_french > best_similarity_french:
            best_similarity_french = similarity_french
            best_match_french = french

    # –ï—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —Å –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –±–æ–ª–µ–µ 50%, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    if best_similarity_russian >= 0.5:
        cursor.execute("SELECT french FROM idioms WHERE russian = ?", (best_match_russian,))
        result = cursor.fetchone()
        connection.close()
        return result[0] if result else None  

    elif best_similarity_french >= 0.5:
        cursor.execute("SELECT russian FROM idioms WHERE french = ?", (best_match_french,))
        result = cursor.fetchone()
        connection.close()
        return result[0] if result else None  

# –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 50%
    connection.close()
    return None 


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text.strip()

    translation = get_translation(user_message)

    if translation:
        await update.message.reply_text(translation)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —ç—Ç–æ—Ç —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º. üíî")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    if not TOKEN:
        raise ValueError

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("developers", developers_command))
    app.add_handler(CallbackQueryHandler(button_handler))  
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –í—ã–≤–æ–¥ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == '__main__':
    main()

